
import argparse
from pathlib import Path
from utils import read_text, write_text


def postprocess_pymupdf_text(text):
    '''
    Remove hyphens at the end of lines.
    Remove jump lines so as the resulting text is one line only.
    '''
    lines = text.split('\n')
    processed_text = ''
    for i, line in enumerate(lines):
        if line.endswith('-'):
            processed_text += line[:-1]
        else:
            processed_text += line + ' '
    return processed_text


def extract_abstract_nougat(markdown_file):
    '''
    Genrally speaking, nougat-generated markdown files have the abstract title marked with '#'.
    The content of the abstract, which is returned by this function is the second line after the abstract title.

    In some cases, the abstract is presented inline as follows:
       Abstract: lorem ipsum dolor sit amet, consectetur adipiscing elit....
    In such cases, if the word 'asbtract' is detected and the length of the line is over 100 characters 
    (heuristic for abstract length, probably larger), then it is assumed that the abstract is in the same line.
    '''
    ESTIMATED_MIN_LENGTH_ABSTRACT = 100
    ESTIMATED_MAX_LENGTH_ABSTRACT = 3000

    path = Path(markdown_file)
    text = path.read_text()
    lines = text.split('\n')
    for i, line in enumerate(lines):
        if 'abstract' in line.lower():
            # 1. Inline abstract case
            if len(line) > ESTIMATED_MIN_LENGTH_ABSTRACT and len(line) < ESTIMATED_MAX_LENGTH_ABSTRACT:
                return line
            # 2. Abstract title followed by content
            else:  # only the title is present
                # NOTE: In this case you can also check if line.startswith('#')
                probably_abstract = lines[i+2]
                if len(probably_abstract) > ESTIMATED_MIN_LENGTH_ABSTRACT and len(probably_abstract) < ESTIMATED_MAX_LENGTH_ABSTRACT:
                    return probably_abstract
    
    # 'abstract' not found -> we fall to take the line previous to the 'introduction' section title
    for i, line in enumerate(lines):
        if 'introduction' in line.lower():
            if len(lines[i-2]) > ESTIMATED_MIN_LENGTH_ABSTRACT and len(lines[i-2]) < ESTIMATED_MAX_LENGTH_ABSTRACT:
                return lines[i-2]
        
    # 'abstract' and 'introduction' not found -> None
    return None
        

def extract_abstract_pymupdf(txt_file):
    '''
    This function extracts the abstract from a text file generated by pyumpdf for Elsevier papers.
    In Elsevier papers parsed by pyumpdf, the abstract title is usually present in a single 
    line in cumbersome ways such as 'A B S T R A C T'.
    An heuristic is used to determine the end of the abstract. The following checks are performed:
    - line contains 'introduction'
    - line contains 'keyword'
    - line contains '©'
    - line contains 'elsevier'
    '''
    path = Path(txt_file)
    text = path.read_text()
    lines = text.split('\n')
    abstract = ''
    abstract_started = False
    for line in lines:
        if abstract_started:
            if heuristic_is_end_of_abstract(line):
                break
            abstract += line + '\n'
        # NOTE: we assume that the first line only containes the abstract title
        if 'abstract' in line.lower().replace(' ', ''):
            abstract_started = True

    abstract = postprocess_pymupdf_text(abstract)
    return abstract


def heuristic_is_end_of_abstract(line):
    '''
    Heuristic method to detect the end of the abstract section in a text file.
    The method is based entirely on exact string matching.
    '''
    if 'introduction' in line.lower():
        return True
    if 'keyword' in line.lower():
        return True
    if '©' in line:
        return True
    if 'elsevier' in line.lower():
        return True
    if 'K E Y W O R D S' in line:
        return True
    if 'I N T R O D U C T I O N' in line:
        return True
    if 'doi' in line.lower():
        return True
    return False


def heuristic_is_start_of_introduction(line):
    '''
    Heuristic method to detect the start of the introduction section in a text file.
    The method is based entirely on exact string matching.
    '''
    if line.lower().startswith('introduction'):
        return True
    if line.lower().startswith('1.'):
        return True
    return False


def heuristic_is_end_of_introduction(line):
    '''
    Heuristic method to detect the end of the introduction section in a text file.
    The method is based entirely on exact string matching.
    '''
    if line.lower().startswith('results'):
        return True
    if line.lower().startswith('method'):
        return True
    if line.lower().startswith('methodology'):
        return True
    if line.lower().startswith('experimental'):
        return True
    if line.lower().startswith('2.'):
        return True
    return False


def extract_introduction_pymupdf(txt_file):
    '''
    This function extracts the introduction from a text file generated by pyumpdf.

    Parameters:
    txt_file (str): Path to the text file.
    '''
    path = Path(txt_file)
    text = path.read_text()
    lines = text.split('\n')
    introduction = ''
    introduction_started = False
    introduction_ended = False # flag to determine wether the introduction was closed or end of file was reached
    for line in lines:
        if introduction_started:
            if heuristic_is_end_of_introduction(line):
                introduction_ended = True
                break
            introduction += line + '\n'
        else:
            if heuristic_is_start_of_introduction(line):
                introduction_started = True
    introduction = postprocess_pymupdf_text(introduction)
    if introduction_ended:
        return introduction
    else:
        return None           



def extract_introduction_nougat(markdown_file):
    '''
    Assumptions: Nougat processed papers start the introduction section with 'Introduction' or 'INTRODUCTION'.
                Line starts with '#'.
                Introduction section ends with a line starting with '#' appears.
                NOTE: the number of preceding '#' characters need to match the one of the introduction title.
                Otherwise, the function would skip possible subsections of the introduction.

    If no introduction is found, None is returned.
    '''
    path = Path(markdown_file)
    text = path.read_text()
    lines = text.split('\n')
    introduction = ''
    hash_title = ''
    introduction_started = False
    introduction_ended = False # flag to determine wether the introduction was closed or end of file was reached
    for line in lines:
        if introduction_started:
            if line.startswith(hash_title):
                introduction_ended = True
                break
            introduction += line + '\n'
        else:
            if 'Introduction' in line or 'INTRODUCTION' in line:
                hash_title = line.replace('Introduction', '').replace('INTRODUCTION', '').strip()
                # find first space character
                pos_space = hash_title.find(' ')
                if pos_space != -1:
                    hash_title = hash_title[:pos_space]
                introduction_started = True

    if introduction_ended:
        return introduction
    else:
        return None


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Extract abstract and introduction sections from a markdown file.')
    parser.add_argument('txt_file', type=str, help='Path to the text file to process.')
    parser.add_argument('--nougat', action='store_true', help='Extract section from nougat-generated markdown file.')
    parser.add_argument('--pymupdf', action='store_true', help='Extract section from pymupdf-generated text file.')
    parser.add_argument('--abstract', action='store_true', help='Extract abstract section.')
    parser.add_argument('--introduction', action='store_true', help='Extract introduction section.')
    args = parser.parse_args()
    markdown_file = args.txt_file

    source_path = Path(markdown_file)

    if args.abstract:
        if args.nougat:
            abstract = extract_abstract_nougat(markdown_file)
            abstract_file = source_path.parent / (source_path.stem + '.abstract.txt')
            write_text(abstract_file, abstract)
        if args.pymupdf:
            abstract = extract_abstract_pymupdf(markdown_file)
            abstract_file = source_path.parent / (source_path.stem + '.abstract.txt')
            write_text(abstract_file, abstract)
        if not args.nougat and not args.pymupdf:
            print('Please specify either --nougat or --pymupdf.')

    if args.introduction:
        if args.nougat:
            introduction = extract_introduction_nougat(markdown_file)
            introduction_file = source_path.parent / (source_path.stem + '.introduction.txt')
            write_text(introduction_file, introduction)
        if args.pymupdf:
            introduction = extract_introduction_pymupdf(markdown_file)
            introduction_file = source_path.parent / (source_path.stem + '.introduction.txt')
            write_text(introduction_file, introduction)
        if not args.nougat and not args.pymupdf:
            print('Please specify either --nougat or --pymupdf.')

    if not args.abstract and not args.introduction:
        print('Please specify either --abstract or --introduction.')