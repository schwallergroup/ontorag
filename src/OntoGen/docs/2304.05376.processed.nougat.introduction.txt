
In the last few years, Language Language Models (LLMs) [1; 2; 3; 4; 5] have transformed various sectors by automating natural language tasks. A prime example of this is the introduction of GitHub Copilot in 2021 [6] and more recently StarCoder [7], which provides proposed code completions based on the context of a file and open windows that increases developers' productivity [8]. Most recent advances are based on the Transformer architecture [9], introduced for neural machine translation and extended to various natural language processing tasks demonstrating remarkable few-shot and zero-shot performance [2]. Nevertheless, it is crucial to recognize the limitations of LLMs, which often struggle with seemingly simple tasks like basic mathematics and chemistry operations [10; 11]. For instance, GPT-4 [12] and GPT-3.5 [13] cannot consistently and accurately multiply _12345*98765_ or convert _IUPAC_ names into the corresponding molecular graph [14]. These shortcomings can be attributed to the models' core design, which focuses on predicting subsequent words. To address these limitations, one viable approach is to augment large language models with dedicated external tools or plugins, such as a calculator for mathematical operations or OPSIN [15] for _IUPAC_ to structure conversion. These specialized tools provide exact answers, thereby compensating for the inherent deficiencies of LLMs in specific domains and enhancing their overall performance and applicability.

Chemistry, as a field, has been impacted through expert-designed artificial intelligence (AI) systems that tackle specific problems, such as reaction prediction [16, 17, 18, 19, 20], retrosynthesis planning [21, 22, 23, 24, 25, 26, 27], molecular property prediction [28, 29, 30, 31, 32], de-novo molecular generation [33, 34], materials design [35, 36] and, more recently, Bayesian Optimization [37, 38, 39]. Due to the nature of their training, it has been shown that code-generating LLMs do possess some understanding of chemistry [14]. By _understanding_, we mean that LLMs are capable of adapting to observations, planning over multiple steps, and responding correctly to intent [40, 41, 42, 43, 13, 44]. However, the automation levels achieved in chemistry remain relatively low compared to other domains, primarily due to its highly experimental nature, the lack of data, as well as the limited scope and applicability of computational tools, even within their designated areas [45].

Integrating such tools tends to occur within isolated environments, such as RXN for Chemistry [46, 47, 48, 18, 24] and AIZynthFinder [49, 50, 25], facilitated by corporate directives that promote integrability. Although most tools are developed by the open-source community or made accessible through application programming interfaces (API), their integration and interoperability pose considerable challenges for experimental chemists, mainly due to their lack of computational skill set and the diversity of tools with steep learning curves, thereby preventing the full exploitation of their potential.

Inspired by successful applications in other fields [51, 10, 52], we propose an LLM-powered chemistry engine, ChemCrow, designed to streamline the reasoning process for various common chemical tasks across areas such as drug and materials design and synthesis. ChemCrow harnesses the power of multiple expert-designed tools for chemistry and operates by prompting an LLM (GPT-4 in our experiments) with specific instructions about the task and the desired format, as shown in Figure 1a. The LLM is provided with a list of tool names, descriptions of their utility, and details about the expected input/output. It is then instructed to answer a user-given prompt using the tools provided when necessary. The model is guided to follow the _Thought, Action, Action Input, Observation_ format [43], which requires it to reason about the current state of the task, consider its relevance to the final goal, and plan the next steps accordingly, demonstrating its level of understanding. After the reasoning in the _Thought_ step, the LLM requests a tool (preceded by the

Figure 1: **Overview and toolset**. a) An overview of the task-solving process. Using a variety of chemistry-related packages and software, a set of tools is created. These tools and a user input are then given to an LLM. The LLM then proceeds through an automatic, iterative chain-of-thought process, deciding on its path, choice of tools, and inputs before coming to a final answer. The example shows the synthesis of DEET, a common insect repellent. b) Toolsets implemented in ChemCrow: reaction, molecule, safety, search, and standard tools.

keyword "Action") and the input for this tool (with the keyword "Action Input"). The text generation then pauses, and the program attempts to execute the requested function using the provided input. The result is returned to the LLM prepended by the keyword "Observation", and the LLM proceeds to the _Thought_ step again. It continues iteratively until the final answer is reached.

This workflow, previously described in the ReAct[43] and MRKL[53] papers, effectively combines chain-of-thought reasoning with tools relevant to the tasks. As a result, and as will be shown in the following sections, the LLM transitions from a hyperconfident - although typically wrong - information source, to a reasoning engine that is prompted to reflect on a task, act using a suitable tool to gather additional information, observe the tool's responses, and repeat this loop until the final answer is reached. Contemporaneously with this work,[54] describes a similar approach of augmenting an LLM with tools for accomplishing tasks in chemistry that are out of reach of GPT-4 alone. Their focus is specifically on cloud labs, while ours investigates an extensive range of tasks and tools including the connection to a cloud-connected robotic synthesis platform. We implemented 18 tools, including web and literature search, as well as molecule-specific and reaction-specific tools, as shown in Figure 0(b) and described in Section 5.3, that endow ChemCrow not only with knowledge about molecular and reaction properties, but also with the capacity to directly execute tasks in a physical lab. While the list of tools included is not exhaustive, ChemCrow has been designed to be easily adapted to new applications by providing the tool, along with a description of its intended use, all through natural language. ChemCrow serves as an assistant to expert chemists while simultaneously lowering the entry barrier for non-experts by offering a simple interface to access accurate chemical knowledge. We analyze the capabilities of ChemCrow on 14 use cases (see Appendix G), including synthesizing target molecules, safety controls, and searching for molecules with similar modes of action.

